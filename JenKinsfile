pipeline {
    agent any
    environment {
        NETLIFY_SITE_ID = '04b1fb46-62cd-4b1c-bdd2-3c8fe0e8ee95'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
        //with variables remember to use double quotes!!!!!!
        REACT_APP_VERSION = "1.2.$BUILD_ID"
    }

    stages {
        //Added to another Jenkinsfile
        // stage('Docker'){
        //     steps {
        //         // building the image - my-playwright is the name of the image we will use later
        //         sh 'docker build -t my-playwright .'
        //     }
        // }

        
        
        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                // Not mandatory but good to do it node --version and npm --version
                // npm ci - to install dependencies that are not checked out in git(node_modules folder)
               sh '''
                    echo "Small change"
                    ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                    ls  -la
               '''
               
            }
        }
        // Create a stage for AWS - It is going to copy the build directory into the bucket
        stage('AWS'){
            agent{
                docker{ 
                    // This image is going to be latest
                    image 'amazon/aws-cli'
                    // The image is built so it needs an entrypoint so we are giving it an empty one
                    args "--entrypoint=''"
                }
            }
            environment {
                AWS_S3_BUCKET = 'cf-templates-13p5bvxvb204w-us-east-1'
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'my_aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        echo "Hello s3"  > index.html
                            #aws s3 cp index.html s3://$AWS_S3_BUCKET/index.html
                            # synchronizing the build directory into our bucket
                        aws s3 sync build s3://$AWS_S3_BUCKET
                    '''
                }
                
            }
        }
        // create running stages in parallel
        stage('Tests'){
            parallel {
                stage('Unit test') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }
                    steps {
                        // Not mandatory but good to do it node --version and npm --version
                        // npm ci - to install dependencies that are not checked out in git(node_modules folder)
                    sh '''
                            test build/index.html
                            npm test
                    '''
                    
                    }
                    // Use the post for each individual stage
                    post{
                        always{
                            junit 'jest-results/junit.xml'  
                        }
                    }
                }
                
                stage('E2E') {
                    agent {
                        docker {
                            // Using the custom image
                            image 'my-playwright'
                            //image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                            reuseNode true
                            // we are having issues with permissions but running the container as root is not a good idea
                            // with Jenkins you will have issues later with the workspace so DON'T DO IT
                            //args '-u root:root'
                        }
                    }
                    steps {
                        /* the firt two lines are the execution on the program so it is working
                        the thrid line is to execute the playwright test */
                    sh '''
                                # we are installing serve as a global dependency that's why we don't have permissions
                                # but we can install it locally to the project
                                # npm install -g serve
                            npm install serve
                                # Installs the serve locally and in the background so it can finish

                                #node_modules/.bin/serve -s build &
                                # using the custom image
                            serve -s build &
                                # we give the serve some time to start
                            sleep 10
                            npx playwright test --reporter=html
                    '''
                    
                    }
                    // Use the post individually for each stage
                    post{
                        always{
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright local Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }
                
            }
        }
        // stage('Test') {
        //     agent {
        //         docker {
        //             image 'node:18-alpine'
        //             reuseNode true
        //         }
        //     }
        //     steps {
        //         // Not mandatory but good to do it node --version and npm --version
        //         // npm ci - to install dependencies that are not checked out in git(node_modules folder)
        //        sh '''
        //             test build/index.html
        //             npm test
        //        '''
               
        //     }
        // }
        // stage('E2E') {
        //     agent {
        //         docker {
        //             image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
        //             reuseNode true
        //             // we are having issues with permissions but running the container as root is not a good idea
        //             // with Jenkins you will have issues later with the workspace so DON'T DO IT
        //             //args '-u root:root'
        //         }
        //     }
        //     steps {
        //         /* the firt two lines are the execution on the program so it is working
        //          the thrid line is to execute the playwright test */
        //        sh '''
        //             # we are installing serve as a global dependency that's why we don't have permissions
        //             # but we can install it locally to the project
        //             # npm install -g serve
        //             npm install serve
        //             # Installs the serve locally and in the background so it can finish
        //             node_modules/.bin/serve -s build &
        //             # we give the serve some time to start
        //             sleep 10
        //             npx playwright test --reporter=html
        //        '''
               
        //     }
        // }
        // Deploy with Netlifly creating an staging environment
        stage('Deploy staging') {
          
            agent {
                docker {
                    //Using the custom image
                    image 'my-playwright'
                    //image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    reuseNode true
                    // we are having issues with permissions but running the container as root is not a good idea
                    // with Jenkins you will have issues later with the workspace so DON'T DO IT
                    //args '-u root:root'
                }
            }
            environment {
                // We create the variable with whatever so later on can get the real value from the node-jq deploy-url
                CI_ENVIRONMENT_URL = "STAGE_URL_TO_BE_SET"
            }
            steps {
                /* the first two lines are the execution on the program so it is working
                the thrid line is to execute the playwright test */
                sh ''' 
                        # Install netlify-cli as per netlyfy docs - we are using the -g global flag we have the same #error as  before because we use the -g. we remove the -g and it will be available at # #node-modules/.bin
                        # npm install netlify-cli -g 
                        
                        #npm install netlify-cli
                    
                        #npm install netlify-cli 
                        #npm install node-jq
                        # You have to use the dir to get to work
                        # node_modules/.bin/netlify --version
                        # because of the custom image netlify is installed globally
                    netlify --version
                    
                    echo "Deploy to staging. Site id: $NETLIFY_SITE_ID"
                        # to check if the netlify token has worked correctly - https://cli.netlify.com/ if you want to # see the possible commands for the cli in netlify
                        # because of the custom image netlify is installed globally
                    netlify status
                        # command to actually deploy the app in netlify and passing the directory we want the app to #be deploying without the --prod flag will create a temporary environment that can be our #staging
                        # because of the custom image netlify is installed globally
                    netlify deploy --dir=build --json > deploy-output.json
                        # get the deploy_url field from the json file
                        #CI_ENVIRONMENT_URL=$(node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json)
                        # because of the custom image node-jq is installed globally
                    CI_ENVIRONMENT_URL=$(jq -r '.deploy_url' deploy-output.json)
                    
                        # node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json
                        # we don't need to start anythin local as it is already in netlify
                        # The configuration for playright is in playwright.config.js
                    
                    npx playwright test --reporter=html
            '''
            
            }
            // Use the post individually for each stage
            post{
                always{
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Staging E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
        //Comment this part to get continuous deployment

        // stage('Approval') {
        //     agent any
        //     // asking for approval
        //     steps {
        //         // add timeout of 15 minutes
        //         timeout(time: 15, unit: 'MINUTES') {
        //              input message: 'Do you wish to deploy to production?', ok: 'Yes, I am sure' 
        //         }
        //     }
        // }
        
        stage('Deploy Prod') {
            // to test in production if the app works
            environment {
                
                CI_ENVIRONMENT_URL = "https://bright-piroshki-ce863e.netlify.app/"
                
            }
            agent {
                docker {
                    // use the custom image created in the Docker stage
                    image 'my-playwright'
                    reuseNode true
                    // we are having issues with permissions but running the container as root is not a good idea
                    // with Jenkins you will have issues later with the workspace so DON'T DO IT
                    //args '-u root:root'
                }
            }
            steps {
                /* the firt two lines are the execution on the program so it is working
                the thrid line is to execute the playwright test */
            sh '''
                        # Install netlify-cli as per netlyfy docs - we are using the -g global flag we have the same error  
                        # as  before because we use the -g. we remove the -g # and it will be available at #node-modules/.    
                        #bin npm install netlify-cli -g 
                    
                        #npm install netlify-cli
                   
                    
                        # You have to use the dir to get to work
                        # from the custom image
                    netlify --version
                    echo "Deploy to production. Dite id: $NETLIFY_SITE_ID"
                        # to check if the netlify token has worked correctly - https://cli.netlify.com/ if you want to # see 
                        # the possible commands for the cli in netlify
                        # node_modules/.bin/netlify status
                        # because it is global now with the custom image remove node_modules
                    netlify status

                        # command to actually deploy the app in netlify and passing the directory we want the app to 
                        # be deploying in prod (--prod)
                        # Because of the glabal installation inside the docker image
                    netlify deploy --dir=build --prod
                        # giving some time in case the deployment takes a little longer so the tests won't fail
                    sleep 20

                        # test part:
                        # we don't need to start anythin local as it is already in netlify
                        # The configuration for playright is in playwright.config.js
                    npx playwright test --reporter=html
            '''
            
            }
            // Use the post individually for each stage
            post{
                always{
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Prod E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
    }
    // post{
    //     always{
    //         junit 'jest-results/junit.xml'
    //         publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
    //     }
    // }
}
